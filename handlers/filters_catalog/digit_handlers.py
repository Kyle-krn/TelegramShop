from loader import dp
from aiogram.types import CallbackQuery, Message
from aiogram.dispatcher import FSMContext
from utils.misc import api
from models.models import ArchiveStringAttrs, SearchUserData
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards.inline import back_keyboard, digit_keyboard
from tortoise.queryset import Q

class DigitAttr(StatesGroup):
    min = State()  
    max = State()


@dp.callback_query_handler(lambda call: call.data.split(':')[0] == 'digit_filter')
async def digit_filter_handler(call: CallbackQuery):
    '''–§–∏–ª—å—Ç—Ä –¥–ª—è —Ç–∏–ø–æ–≤ –∑–Ω–∞—á–µ–Ω–∏–π int float, –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ –æ—Ç –º–∏–Ω –¥–æ –º–∞–∫—Å'''
    attr_name_id = call.data.split(':')[1]
    attr_name = await ArchiveStringAttrs.get(id=int(attr_name_id))
    # attr_name = attr_name.string
    category_id = int(call.data.split(':')[2])
    search_data = await SearchUserData.get(Q(user__tg_id=call.message.chat.id) & Q(category_id=category_id))
    category = await api.get_category_light_info(category_id=category_id, filters=True)
    attr_in_category = [i for i in category['filters'] if i['name'] == attr_name.string]
    if len(attr_in_category) == 0:
        raise IndexError(f"–ê—Ç—Ä–∏–±—É—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω")
    if type(attr_in_category[0]['value']) not in [int, float]:
        raise IndexError(f"–ê—Ç—Ä–∏–±—É—Ç {attr_name.string} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º.")
    min_max = await api.get_min_max_digit_attr(category_id=category_id, attr_name=attr_name.string)
    attr_in_data = [i for i in search_data.attrs if i['name'] == attr_name.string] if search_data.attrs is not None else []
    if attr_in_data:
        attr_in_data = attr_in_data[0]
        attr_in_data['min'] = min_max['min'] if attr_in_data['min'] is None else attr_in_data['min']
        attr_in_data['max'] = min_max['max'] if attr_in_data['max'] is None else attr_in_data['max']
    else:
        attr_in_data = {'name': attr_name.string, 'value': None, 'min': min_max['min'], 'max': min_max['max']}
        if type(attr_in_category[0]['value']) == int:
            attr_in_data['min'] = int(attr_in_data['min'])
            attr_in_data['max'] = int(attr_in_data['max'])
    
    keyboard = await digit_keyboard(attr_name_id=attr_name.id, 
                                    category_id=category_id, 
                                    user_value=attr_in_data, 
                                    prefix=attr_in_category[0]['prefix'])
    await call.message.delete()
    return await call.message.answer(text='–í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ –Ω–∏–∂–µ ‚¨áÔ∏è', reply_markup=keyboard)


@dp.callback_query_handler(lambda call: call.data.split(':')[0] == 'reset_digit')
async def reset_filter_handler(call: CallbackQuery):
    '''–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω'''
    attr_name_id = call.data.split(':')[1]
    attr_name = await ArchiveStringAttrs.get(id=int(attr_name_id))
    attr_name = attr_name.string
    category_id = int(call.data.split(':')[2])
    search_data = await SearchUserData.get(Q(user__tg_id=call.message.chat.id) & Q(category_id=category_id))
    search_data.attrs = [i for i in search_data.attrs if i['name'] != attr_name]
    await search_data.save()
    call.data = "digit_filter:" + ":".join(call.data.split(':')[1:])
    return await digit_filter_handler(call)

@dp.callback_query_handler(lambda call: call.data.split(':')[0] == 'min_attr')
@dp.callback_query_handler(lambda call: call.data.split(':')[0] == 'max_attr')
async def min_price_handler(call: CallbackQuery):  
    '''–í—ã–±–æ—Ä –º–µ–∂–¥—É –º–∏–Ω –∏ –º–∞–∫—Å'''  
    if call.data.split(':')[0] == 'min_attr':
        await DigitAttr.min.set()
        text='<b>–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>'
    else:
        await DigitAttr.max.set()
        text='<b>–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:</b>'    
    state = dp.get_current().current_state()
    
    kwargs = {
    "attr_name_id": call.data.split(':')[1],
    "category_id": int(call.data.split(':')[2])
    }
    await state.update_data(**kwargs)
    await call.message.edit_text(text=text, reply_markup=await back_keyboard(callback=f"cds:digit_filter:{kwargs['attr_name_id']}:{kwargs['category_id']}"))


@dp.message_handler(state=DigitAttr)
async def process_price_invalid(message: Message, state: FSMContext):
    '''–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏'''
    user_data = await state.get_data()          #cds - cancel_digit_state
    attr_name = await ArchiveStringAttrs.get(id=int(user_data['attr_name_id']))
    keyboard = await back_keyboard(callback=f"cds:digit_filter:{attr_name.id}:{user_data['category_id']}")
    category = await api.get_category_light_info(category_id=user_data['category_id'], filters=True)
    attr_in_category = [i for i in category['filters'] if i['name'] == attr_name.string]
    try:
        value = float(message.text) if type(attr_in_category[0]['value']) == float else int(message.text)
    except (TypeError, ValueError):
        return await message.reply("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.", reply_markup=keyboard)
    min_max = await api.get_min_max_digit_attr(category_id=user_data['category_id'], attr_name=attr_name.string)
    if (min_max['min'] <= value <= min_max['max']) is False:
        min_max['min'] = int(min_max['min']) if type(attr_in_category[0]['value']) == int else min_max['min']
        min_max['max'] = int(min_max['max']) if type(attr_in_category[0]['value']) == int else min_max['max']
        return await message.reply(f"–û—Ç {min_max['min']} {attr_in_category[0]['prefix']} –¥–æ  {min_max['max']} {attr_in_category[0]['prefix']}" ,reply_markup=keyboard)
    search_data = await SearchUserData.get(Q(user__tg_id=message.chat.id) & Q(category_id=category['id']))
    
    current_state = await state.get_state()

    attr_in_data = [i for i in search_data.attrs if i['name'] == attr_name.string] if search_data.attrs is not None else []
    if not attr_in_data:
        attr_in_data = [
                        {'name': attr_name.string, 
                         'value': None, 
                         'min': int(min_max['min']) if type(attr_in_category[0]['value']) == int else min_max['min'], 
                         'max': int(min_max['max']) if type(attr_in_category[0]['value']) == int else min_max['max']
                         }
                         ]

    if current_state.split(":")[1] == 'min':
        attr_in_data[0]['min'] = value 
        text = f"–ò—â–µ–º –æ—Ç {value} {attr_in_category[0]['prefix']} üëÄ\n"
    
    elif current_state.split(":")[1] == 'max':
        attr_in_data[0]['max'] = value
        text = f"–ò—â–µ–º –¥–æ {value} {attr_in_category[0]['prefix']} üëÄ\n"
    search_data.attrs = [i for i in search_data.attrs if i['name'] != attr_name.string] + attr_in_data if search_data.attrs else attr_in_data
    await search_data.save()
    await state.finish()

    return await message.answer(text=text + "–ß—Ç–æ –±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", 
                                reply_markup=await back_keyboard(callback=f"digit_filter:{attr_name.id}:{user_data['category_id']}", 
                                                                                              text="–ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ–∏—Å–∫–∞ üîé"))
    
    


@dp.callback_query_handler(lambda call: call.data.split(':')[0] == 'cds', state=DigitAttr)
async def cancel_state(call: CallbackQuery, state: FSMContext):
    '''–ü–æ–∑–æ–≤–æ–ª—è–µ—Ç —Å–∫–∏–Ω—É—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º'''
    await state.finish()
    call.data = ":".join(call.data.split(':')[1:])
    return await digit_filter_handler(call)